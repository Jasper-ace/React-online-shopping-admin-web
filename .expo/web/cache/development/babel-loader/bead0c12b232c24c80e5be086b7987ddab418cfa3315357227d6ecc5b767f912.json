{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = createContext();\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    authenticatedUsername = _useState2[0],\n    setAuthenticatedUsername = _useState2[1];\n  var setAuthUsername = function setAuthUsername(username) {\n    console.log('Setting authenticatedUsername:', username);\n    setAuthenticatedUsername(username);\n  };\n  return _jsx(AuthContext.Provider, {\n    value: {\n      authenticatedUsername: authenticatedUsername,\n      setAuthUsername: setAuthUsername\n    },\n    children: children\n  });\n};\nexport var useAuth = function useAuth() {\n  var context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider. Did you forget to wrap your components with AuthProvider?');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AuthContext","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","authenticatedUsername","setAuthenticatedUsername","setAuthUsername","username","console","log","Provider","value","useAuth","context","Error"],"sources":["C:/xampp/htdocs/MyReactNative1/screen/AuthContext.js"],"sourcesContent":["// AuthContext.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [authenticatedUsername, setAuthenticatedUsername] = useState('');\r\n\r\n  const setAuthUsername = (username) => {\r\n    console.log('Setting authenticatedUsername:', username);\r\n    setAuthenticatedUsername(username);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authenticatedUsername, setAuthUsername }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider. Did you forget to wrap your components with AuthProvider?');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEnE,IAAMC,WAAW,GAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACrC,IAAAC,SAAA,GAA0DP,QAAQ,CAAC,EAAE,CAAC;IAAAQ,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/DG,qBAAqB,GAAAF,UAAA;IAAEG,wBAAwB,GAAAH,UAAA;EAEtD,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,QAAQ,EAAK;IACpCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,QAAQ,CAAC;IACvDF,wBAAwB,CAACE,QAAQ,CAAC;EACpC,CAAC;EAED,OACEX,IAAA,CAACC,WAAW,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEP,qBAAqB,EAArBA,qBAAqB;MAAEE,eAAe,EAAfA;IAAgB,CAAE;IAAAN,QAAA,EACrEA;EAAQ,CACW,CAAC;AAE3B,CAAC;AAED,OAAO,IAAMY,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;EAC3B,IAAMC,OAAO,GAAGpB,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACgB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,wGAAwG,CAAC;EAC3H;EACA,OAAOD,OAAO;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}